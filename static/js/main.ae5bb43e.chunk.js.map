{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","All","sortField","setSortFiels","isReversed","setIsReversed","visibleGoods","goods","goodsCopy","sort","good1","good2","ALPH","localeCompare","LNGTH","length","reverse","getPreparedGoods","className","onClick","type","cn","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,eAAAA,E,QAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,KAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA/BR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,UAAWE,EACH,EADGA,WAEPI,EAAS,YAAOD,GAgBtB,OAdIL,GACFM,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQT,GACN,KAAKL,EAASe,KACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,MACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,EACKI,EAAUQ,UAGZR,EAOcS,CAAiBnB,EAAiB,CACrDI,YACAE,eAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMhB,EAAaN,EAASe,OACrCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,YAAanB,IAAcL,EAASe,OAJxC,iCAUA,wBACEO,QAAS,kBAAMhB,EAAaN,EAASiB,QACrCM,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAanB,IAAcL,EAASiB,QAJxC,4BAUA,wBACEK,QAAS,kBAAMd,GAAc,SAACiB,GAAD,OAAWA,MACxCF,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,aAAcjB,IAJlB,sBAUEF,GAAaE,IACb,wBACEgB,KAAK,SACLF,UAAU,4BACVC,QAAS,WACPd,GAAc,GACdF,EAAaN,EAASI,MAL1B,sBAaJ,6BACE,6BACGK,EAAaiB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SAAoBA,eChHhCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ae5bb43e.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPH = 'alph',\n  LNGTH = 'length',\n  All = '',\n}\n\ntype PreparedArgs = {\n  sortField: SortType;\n  isReversed: boolean;\n};\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversed }: PreparedArgs,\n): string[] {\n  const goodsCopy = [...goods];\n\n  if (sortField) {\n    goodsCopy.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPH:\n          return good1.localeCompare(good2);\n        case SortType.LNGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return goodsCopy.reverse();\n  }\n\n  return goodsCopy;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortFiels] = useState(SortType.All);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortFiels(SortType.ALPH)}\n          type=\"button\"\n          className={cn('button is-info', {\n            ' is-light': sortField !== SortType.ALPH,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortFiels(SortType.LNGTH)}\n          type=\"button\"\n          className={cn('button is-success', {\n            ' is-light': sortField !== SortType.LNGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed((prev) => !prev)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            ' is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortFiels(SortType.All);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map((good) => (\n            <li data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}